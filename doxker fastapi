Here’s the complete solution for creating a simple CRUD API using FastAPI with SQLite for an Employee table, and then Dockerizing it. This includes all necessary files and steps.

1. Project Structure

crud-fastapi/
├── app/
│   ├── main.py
│   ├── models.py
│   ├── schemas.py
│   ├── database.py
├── requirements.txt
├── Dockerfile

2. Create the Files

database.py

This file sets up the SQLite database and provides a session for interacting with it.

from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

DATABASE_URL = "sqlite:///./test.db"

# Set up the database connection
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

# Dependency to get a session from the database
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

models.py

This file defines the SQLAlchemy model for the Employee table.

from sqlalchemy import Column, Integer, String, Float
from .database import Base

class Employee(Base):
    __tablename__ = "employees"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    email = Column(String, unique=True, index=True)
    position = Column(String)
    salary = Column(Float)

schemas.py

This file defines the Pydantic schemas used to validate request and response data.

from pydantic import BaseModel

# Base class for Employee data
class EmployeeBase(BaseModel):
    name: str
    email: str
    position: str
    salary: float

# Schema for creating an employee
class EmployeeCreate(EmployeeBase):
    pass

# Schema for response with employee details
class Employee(EmployeeBase):
    id: int

    class Config:
        orm_mode = True

main.py

This file contains the FastAPI app with the CRUD routes for Employee.

from fastapi import FastAPI, Depends, HTTPException
from sqlalchemy.orm import Session
from . import models, schemas, database

app = FastAPI()

# Create the database tables
models.Base.metadata.create_all(bind=database.engine)

@app.post("/employees/", response_model=schemas.Employee)
def create_employee(employee: schemas.EmployeeCreate, db: Session = Depends(database.get_db)):
    db_employee = models.Employee(**employee.dict())
    db.add(db_employee)
    db.commit()
    db.refresh(db_employee)
    return db_employee

@app.get("/employees/{employee_id}", response_model=schemas.Employee)
def read_employee(employee_id: int, db: Session = Depends(database.get_db)):
    db_employee = db.query(models.Employee).filter(models.Employee.id == employee_id).first()
    if not db_employee:
        raise HTTPException(status_code=404, detail="Employee not found")
    return db_employee

@app.put("/employees/{employee_id}", response_model=schemas.Employee)
def update_employee(employee_id: int, employee: schemas.EmployeeCreate, db: Session = Depends(database.get_db)):
    db_employee = db.query(models.Employee).filter(models.Employee.id == employee_id).first()
    if not db_employee:
        raise HTTPException(status_code=404, detail="Employee not found")
    for key, value in employee.dict().items():
        setattr(db_employee, key, value)
    db.commit()
    db.refresh(db_employee)
    return db_employee

@app.delete("/employees/{employee_id}")
def delete_employee(employee_id: int, db: Session = Depends(database.get_db)):
    db_employee = db.query(models.Employee).filter(models.Employee.id == employee_id).first()
    if not db_employee:
        raise HTTPException(status_code=404, detail="Employee not found")
    db.delete(db_employee)
    db.commit()
    return {"detail": "Employee deleted"}

3. Install Dependencies

Create the requirements.txt file to list the project dependencies.

requirements.txt

fastapi
uvicorn
sqlalchemy
pydantic

To install these dependencies, run:

pip install -r requirements.txt

4. Create the Dockerfile

Create a Dockerfile to containerize the application.

Dockerfile

# Use a lightweight Python image
FROM python:3.10-slim

# Set the working directory
WORKDIR /app

# Copy the requirements file and install dependencies
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy the application code
COPY ./app ./app

# Expose the application port
EXPOSE 8000

# Command to run the app
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]

5. Build and Run the Application Locally

To test the application locally, run:

uvicorn app.main:app --reload

You can now access the API at http://127.0.0.1:8000 and use the Swagger UI at http://127.0.0.1:8000/docs.

6. Rebuild the Database

You may need to delete the existing test.db if it has the old schema, and then the database will be recreated.

rm test.db

7. Dockerize the Application

Build the Docker Image

Run the following command to build the Docker image:

docker build -t fastapi-crud .

Run the Docker Container

Run the Docker container:

docker run -d -p 8000:8000 fastapi-crud

This will start the app inside a Docker container, and you can access it at http://localhost:8000.

8. Test the API

You can now test the following CRUD operations using Swagger UI:
	•	POST /employees/: Create a new employee.
	•	GET /employees/{employee_id}: Fetch employee details by ID.
	•	PUT /employees/{employee_id}: Update employee details.
	•	DELETE /employees/{employee_id}: Delete an employee.

Let me know if you need any further help!
